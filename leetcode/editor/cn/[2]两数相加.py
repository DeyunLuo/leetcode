# ÁªôÂá∫‰∏§‰∏™ ÈùûÁ©∫ ÁöÑÈìæË°®Áî®Êù•Ë°®Á§∫‰∏§‰∏™ÈùûË¥üÁöÑÊï¥Êï∞„ÄÇÂÖ∂‰∏≠ÔºåÂÆÉ‰ª¨ÂêÑËá™ÁöÑ‰ΩçÊï∞ÊòØÊåâÁÖß ÈÄÜÂ∫è ÁöÑÊñπÂºèÂ≠òÂÇ®ÁöÑÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™ËÉΩÂ≠òÂÇ® ‰∏Ä‰Ωç Êï∞Â≠ó„ÄÇ 
# 
#  Â¶ÇÊûúÔºåÊàë‰ª¨Â∞ÜËøô‰∏§‰∏™Êï∞Áõ∏Âä†Ëµ∑Êù•ÔºåÂàô‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®Êù•Ë°®Á§∫ÂÆÉ‰ª¨ÁöÑÂíå„ÄÇ 
# 
#  ÊÇ®ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞ÈÉΩ‰∏ç‰ºö‰ª• 0 ÂºÄÂ§¥„ÄÇ 
# 
#  Á§∫‰æãÔºö 
# 
#  ËæìÂÖ•Ôºö(2 -> 4 -> 3) + (5 -> 6 -> 4)
# ËæìÂá∫Ôºö7 -> 0 -> 8
# ÂéüÂõ†Ôºö342 + 465 = 807
#  
#  Related Topics ÈìæË°® Êï∞Â≠¶ 
#  üëç 5422 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        result_node = ListNode(0)
        now_node = result_node
        carry = 0
        while l1 or l2:
            x = l1.val if l1 else 0  # ‰∏çÁ©∫Â∞±ËµãÂÄºÔºåÂê¶Âàô‰∏∫0
            y = l2.val if l2 else 0
            add_value = x + y + carry
            carry = add_value // 10
            now_node.next = ListNode(add_value % 10)
            now_node = now_node.next
            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next
            # print(now_node.val)
        if carry:
            now_node.next = ListNode(1)
            # print(now_node.next.val)
        return result_node.next


# leetcode submit region end(Prohibit modification and deletion)

if __name__ == '__main__':
    l1 = ListNode(9)
    l1.next = ListNode(9)
    l1.next.next = ListNode(9)
    l2 = ListNode(5)
    l2.next = ListNode(6)
    l2.next.next = ListNode(4)
    print(Solution().addTwoNumbers(l1, l2))
