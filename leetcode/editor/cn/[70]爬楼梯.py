# 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 
# 
#  每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 
# 
#  注意：给定 n 是一个正整数。 
# 
#  示例 1： 
# 
#  输入： 2
# 输出： 2
# 解释： 有两种方法可以爬到楼顶。
# 1.  1 阶 + 1 阶
# 2.  2 阶 
# 
#  示例 2： 
# 
#  输入： 3
# 输出： 3
# 解释： 有三种方法可以爬到楼顶。
# 1.  1 阶 + 1 阶 + 1 阶
# 2.  1 阶 + 2 阶
# 3.  2 阶 + 1 阶
#  
#  Related Topics 动态规划 
#  👍 1635 👎 0

# 最近重复子问题
# 第n级台阶 只能由n-1跨一步 n-2跨两步走过来
# f1 = 1
# f2 = 2
# f3 = f1 + f2
# f4 = f3 + f2
# f5 = f4 + f3
# f6 = f5 + f4


class Solution:
    # 2020 5.1 第一遍
    def climbStairs(self, n: int) -> int:
        if n < 3:
            return n
        f1, f2, f3 = 1, 2, 3
        for _ in range(3, n + 1):
            f3 = f2 + f1
            f1 = f2
            f2 = f3
        return f3


if __name__ == '__main__':
    Solution.climbStairs(10)
